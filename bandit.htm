<!DOCTYPE HTML>
<html>
<head>
	<title>multi armed bandit</title>

	<style>
		html, body {height: 100%; margin:0; padding: 0}
		.container {
			margin: 0 auto;
			padding: 20px 0;
			width: 960px;
			border-left: 1px solid black;
			border-right: 1px solid black;
		}
		.container h1 {
			margin-top: 0;
			padding-top: 0.67em;
		}
		.description {
			margin: 0 15px;
		}

		.experiment {
			width: 90%;
			border: 1px solid #ccc;
			padding: 15px;
			margin: 30px auto;

		}
		.experiment h3, .experiment .machine, .experiment .results {
			display:inline-block;
			width: 49%;
		}
		.experiment .machine {width: 26%;}
		.experiment .results {width: 73%;}

		.experiment h3 {margin-top: 0;}
		.experiment .results td {padding-left: 20px;}

		.controls {position:fixed; top:10px; left: 10px;}
	</style>
</head>

<body>
	<div class="controls">
		<button id="StartAll">Start All</button>
		<button id="StopAll">Stop All</button>
	</div>

	<div class="container">
		<div class="description">
			<h1>Experiments with multi-armed-bandit algorithms</h1>
			<p>
				Below is a series of experiments designed to test the effectiveness of various multi-armed-bandit algorithms at varied conversion rates.
			</p>
		</div>

		<div id="EpsilonGreedy5" class="experiment">
			<div class="header">
				<h3>Epsilon Greedy 5%</h3>
				<h3>Results</h3>
			</div>
			<div class="machine">
				<div class="option"></div>
				<button class="reward" type="text">Reward</button>
				<button class="skip" type="text">Skip</button>
				<br>
				<button class="auto" type="text">Auto</button>
				<button class="stop" type="text">Stop</button>
				<button class="reset" type="text">Reset</button>
			</div>
			<div class="results">
				&lt;no results yet&gt;
			</div>
		</div>

		<div id="EpsilonGreedy10" class="experiment">
			<div class="header">
				<h3>Epsilon Greedy 10%</h3>
				<h3>Results</h3>
			</div>
			<div class="machine">
				<div class="option"></div>
				<button class="reward" type="text">Reward</button>
				<button class="skip" type="text">Skip</button>
				<br>
				<button class="auto" type="text">Auto</button>
				<button class="stop" type="text">Stop</button>
				<button class="reset" type="text">Reset</button>
			</div>
			<div class="results">
				&lt;no results yet&gt;
			</div>
		</div>
		<div id="EpsilonGreedy15" class="experiment">
			<div class="header">
				<h3>Epsilon Greedy 15%</h3>
				<h3>Results</h3>
			</div>
			<div class="machine">
				<div class="option"></div>
				<button class="reward" type="text">Reward</button>
				<button class="skip" type="text">Skip</button>
				<br>
				<button class="auto" type="text">Auto</button>
				<button class="stop" type="text">Stop</button>
				<button class="reset" type="text">Reset</button>
			</div>
			<div class="results">
				&lt;no results yet&gt;
			</div>
		</div>
		<div id="EpsilonLogNaive" class="experiment">
			<div class="header">
				<h3>Naive Logarithmic Epsilon</h3>
				<h3>Results</h3>
			</div>
			<div class="machine">
				<div class="option"></div>
				<button class="reward" type="text">Reward</button>
				<button class="skip" type="text">Skip</button>
				<br>
				<button class="auto" type="text">Auto</button>
				<button class="stop" type="text">Stop</button>
				<button class="reset" type="text">Reset</button>
			</div>
			<div class="results">
				&lt;no results yet&gt;
			</div>
			<p>
				For iterations t, e = Log(t)/t
			</p>
		</div>
		<div id="EpsilonLogImproved" class="experiment">
			<div class="header">
				<h3>Improved Logarithmic Epsilon</h3>
				<h3>Results</h3>
			</div>
			<div class="machine">
				<div class="option"></div>
				<button class="reward" type="text">Reward</button>
				<button class="skip" type="text">Skip</button>
				<br>
				<button class="auto" type="text">Auto</button>
				<button class="stop" type="text">Stop</button>
				<button class="reset" type="text">Reset</button>
			</div>
			<div class="results">
				&lt;no results yet&gt;
			</div>
			<p>
				For iterations t, e = log(t)^2.5/t
			</p>
		</div>
		<div id="EpsilonFirstLog" class="experiment">
			<div class="header">
				<h3>Epsilon First Logarithmic</h3>
				<h3>Results</h3>
			</div>
			<div class="machine">
				<div class="option"></div>
				<button class="reward" type="text">Reward</button>
				<button class="skip" type="text">Skip</button>
				<br>
				<button class="auto" type="text">Auto</button>
				<button class="stop" type="text">Stop</button>
				<button class="reset" type="text">Reset</button>
			</div>
			<div class="results">
				&lt;no results yet&gt;
			</div>
			<p>
				For iterations t: <br>
				e=t for t < 1000, then <br>
				e = log(t)^2.5/t
			</p>
		</div>


		<div id="ConfidenceBounded" class="experiment">
			<div class="header">
				<h3>Confidence Bounder</h3>
				<h3>Results</h3>
			</div>
			<div class="machine">
				<div class="option"></div>
				<button class="reward" type="text">Reward</button>
				<button class="skip" type="text">Skip</button>
				<br>
				<button class="auto" type="text">Auto</button>
				<button class="stop" type="text">Stop</button>
				<button class="reset" type="text">Reset</button>
			</div>
			<div class="results">
				&lt;no results yet&gt;
			</div>
			<p>
				Calculates confidence bound for each lever and
				pulls the lever with the highest level of confidence.
			</p>
		</div>

		<div id="CBLimitedIterations" class="experiment">
			<div class="header">
				<h3>Confidence Bounder 2</h3>
				<h3>Results</h3>
			</div>
			<div class="machine">
				<div class="option"></div>
				<button class="reward" type="text">Reward</button>
				<button class="skip" type="text">Skip</button>
				<br>
				<button class="auto" type="text">Auto</button>
				<button class="stop" type="text">Stop</button>
				<button class="reset" type="text">Reset</button>
			</div>
			<div class="results">
				&lt;no results yet&gt;
			</div>
			<p>
				Calculates confidence bound for each lever and
				pulls the lever with the highest level of confidence.
				<br>
				Runs for a set number of iterations and then stops.
			</p>
		</div>


		<div id="StatSigger" class="experiment">
			<div class="header">
				<h3>StatSigger</h3>
				<h3>Results</h3>
			</div>
			<div class="machine">
				<div class="option"></div>
				<button class="reward" type="text">Reward</button>
				<button class="skip" type="text">Skip</button>
				<br>
				<button class="auto" type="text">Auto</button>
				<button class="stop" type="text">Stop</button>
				<button class="reset" type="text">Reset</button>
			</div>
			<div class="results">
				&lt;no results yet&gt;
			</div>
			<p>
				Calculates confidence bound for each lever and
				pulls the lever with the highest level of confidence,
				ignoring levers for which statistical significance
				has already been achieved.
				<br><br>
				This strategy is basically guaranteed to result in a
				class 1 error every time.
			</p>
		</div>

	</div>

	<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
	<script type="text/javascript" src="js/bandit.js"></script>
	<script>
		$('#StartAll').click(function(){
			$(this).attr('disabled', 'disabled');
			$('.auto').trigger('click');
		});
		$('#StopAll').click(function(){
			$('#StartAll').attr('disabled', false);
			$('.stop').trigger('click');
		});

		var levers =	{
						'purple': [1, 1, 0.23],
						'green': [1, 1, 0.33],
						'blue': [1, 1, 0.37],
						'orange': [1, 1, 0.41],
						'black': [1, 1, 0.27]
						}


		var epsilon_greedy5 = new bandit();
		epsilon_greedy5.init({
			$wrapper: $('#EpsilonGreedy5'),
			_epsilon: 0.05,
			levers: levers
		});

		var epsilon_greedy10 = new bandit();
		epsilon_greedy10.init({
			$wrapper: $('#EpsilonGreedy10'),
			_epsilon: 0.10,
			levers: levers
		});

		var epsilon_greedy15 = new bandit();
		epsilon_greedy15.init({
			$wrapper: $('#EpsilonGreedy15'),
			_epsilon: 0.15,
			levers: levers
		});

		var epsilon_log_naive = new bandit();
		epsilon_log_naive.init({
			$wrapper: $('#EpsilonLogNaive'),
			_epsilon: 1,
			levers: levers
		});
		epsilon_log_naive._resetEpsilon = function() {
			/*
			 *	for t iterations, epsilon decreases at a rate of log(t)/t
			 */
			this._epsilon = Math.log(this._totalIterations)/this._totalIterations;
		}

		var epsilon_log_improved = new bandit();
		epsilon_log_improved.init({
			$wrapper: $('#EpsilonLogImproved'),
			_epsilon: 1,
			levers: levers
		});
		epsilon_log_improved._resetEpsilon = function() {
			/*
			 *	appropriate for very low conversion rates
			 *	for t iterations, epsilon decreases at a rate of log(t)^2.5/t
			 */
			this._epsilon = Math.pow(Math.log(this._totalIterations), 2.5) / this._totalIterations;
		}

		var epsilon_first_log = new bandit();
		epsilon_first_log.init({
			$wrapper: $('#EpsilonFirstLog'),
			_epsilon: 1,
			levers: levers
		});
		epsilon_first_log._resetEpsilon = function() {
			/*
			 *	appropriate for very low conversion rates
			 *	for t iterations, epsilon decreases at a rate of log(t)^2.5/t
			 */
			if (this._totalIterations > 1000) {
				this._epsilon = Math.pow(Math.log(this._totalIterations), 2.5) / this._totalIterations;
			}
		}


		var confidence_bounded = new bandit();
		confidence_bounded.init({
			$wrapper: $('#ConfidenceBounded'),
			_epsilon: -1,
			levers: levers
		});
		confidence_bounded._getLeverScore = function(lever) {
			var ratio = this._getCBound(lever);
			return ratio;
		}


		var confidence_bounded_2 = new bandit();
		confidence_bounded_2.init({
			$wrapper: $('#CBLimitedIterations'),
			_epsilon: -1,
			maxIterations: 25000,
			levers: levers
		});
		confidence_bounded_2._getLeverScore = function(lever) {
			if (this._totalIterations >= this.maxIterations) {
				clearInterval(this._autoInterval);
				this.$wrapper.css('border', '2px solid green');
			}
			var ratio = this._getCBound(lever);
			return ratio;
		}


		var cb_stat_sig = new bandit();
		cb_stat_sig.init({
			$wrapper: $('#StatSigger'),
			_epsilon: -1,
			levers: levers
		});
		cb_stat_sig._getLeverScore = function(lever) {
			var stats = this._getSignificance(lever);
			if (stats.sig99) {
				return 0;
			} else {
				var ratio = this._getCBound(lever);
				return ratio;
			}
		}

	</script>
</body>
</html>